{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\VSCode\\\\WEB\\\\Curso-React\\\\fundamentos-react\\\\src\\\\components\\\\mega-senaDesafio\\\\Mega-Sena.jsx\";\nimport React, { Component } from \"react\";\nimport Botao from \"./Botao\";\nimport Exibir from \"./Exibir\";\nexport default class MegaSena extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numeros: []\n    };\n\n    this.gerarNumeros = () => {\n      // Limpa o array caso tenha algum valor nele.\n      while (this.state.numeros.length !== 0) {\n        this.setState({\n          numeros: this.state.numeros.pop()\n        });\n      } // Gerador.\n\n\n      while (this.state.numeros.length !== 6) {\n        // Gera um n√∫mero aleat√≥rio entre 1 e 60.\n        let num = Number(Math.floor(Math.random() * 59 + 1)); // Verifica se o n√∫mero est√° no array, se n√£o estiver, o valor √© adicionado.\n\n        if (!this.state.numeros.includes(num)) {\n          this.setState({\n            numeros: this.state.numeros.push(num)\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, \"Mega-Sena\"), /*#__PURE__*/React.createElement(Botao, {\n      gerar: this.gerarNumeros,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Exibir, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n/* Falhei miseravelmente... üò≠\r\n\r\nEu consegui gerar os n√∫meros, por√©m, quando tento gerar um novo array de n√∫meros, √© retornado um erro:\r\n\r\n\"TypeError: this.state.numeros.pop is not a function\"\r\n*/","map":{"version":3,"sources":["D:/Programming/VSCode/WEB/Curso-React/fundamentos-react/src/components/mega-senaDesafio/Mega-Sena.jsx"],"names":["React","Component","Botao","Exibir","MegaSena","state","numeros","gerarNumeros","length","setState","pop","num","Number","Math","floor","random","includes","push","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAE5CI,KAF4C,GAEpC;AACJC,MAAAA,OAAO,EAAE;AADL,KAFoC;;AAAA,SAM5CC,YAN4C,GAM7B,MAAM;AAEjB;AACA,aAAM,KAAKF,KAAL,CAAWC,OAAX,CAAmBE,MAAnB,KAA8B,CAApC,EAAuC;AACnC,aAAKC,QAAL,CAAc;AACVH,UAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,CAAmBI,GAAnB;AADC,SAAd;AAGH,OAPgB,CASjB;;;AACA,aAAM,KAAKL,KAAL,CAAWC,OAAX,CAAmBE,MAAnB,KAA8B,CAApC,EAAuC;AACnC;AACA,YAAIG,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,CAAD,CAAhB,CAFmC,CAInC;;AACA,YAAG,CAAC,KAAKV,KAAL,CAAWC,OAAX,CAAmBU,QAAnB,CAA4BL,GAA5B,CAAJ,EAAsC;AAClC,eAAKF,QAAL,CAAc;AACVH,YAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,CAAmBW,IAAnB,CAAwBN,GAAxB;AADC,WAAd;AAIH;AACJ;AACJ,KA5B2C;AAAA;;AA8B5CO,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAGI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKX,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH;;AAvC2C;AA0ChD","sourcesContent":["import React, { Component } from \"react\"\r\n\r\nimport Botao from \"./Botao\"\r\nimport Exibir from \"./Exibir\"\r\n\r\nexport default class MegaSena extends Component {\r\n\r\n    state = {\r\n        numeros: []\r\n    }\r\n\r\n    gerarNumeros = () => {\r\n\r\n        // Limpa o array caso tenha algum valor nele.\r\n        while(this.state.numeros.length !== 0) {\r\n            this.setState({\r\n                numeros: this.state.numeros.pop()\r\n            })\r\n        }\r\n\r\n        // Gerador.\r\n        while(this.state.numeros.length !== 6) {\r\n            // Gera um n√∫mero aleat√≥rio entre 1 e 60.\r\n            let num = Number(Math.floor(Math.random() * 59 + 1))\r\n\r\n            // Verifica se o n√∫mero est√° no array, se n√£o estiver, o valor √© adicionado.\r\n            if(!this.state.numeros.includes(num)) {\r\n                this.setState({\r\n                    numeros: this.state.numeros.push(num)\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Mega-Sena</h2>\r\n\r\n                <Botao gerar={this.gerarNumeros}></Botao>\r\n                <Exibir></Exibir>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/* Falhei miseravelmente... üò≠\r\n\r\nEu consegui gerar os n√∫meros, por√©m, quando tento gerar um novo array de n√∫meros, √© retornado um erro:\r\n\r\n\"TypeError: this.state.numeros.pop is not a function\"\r\n*/"]},"metadata":{},"sourceType":"module"}